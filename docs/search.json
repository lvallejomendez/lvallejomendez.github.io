[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Luis Vallejo Méndez",
    "section": "",
    "text": ". . . . .\nThis site is under construction…"
  },
  {
    "objectID": "projects/jupyter-labs-eda-dataviz.html#assignment-exploring-and-preparing-data",
    "href": "projects/jupyter-labs-eda-dataviz.html#assignment-exploring-and-preparing-data",
    "title": "LVM",
    "section": "Assignment: Exploring and Preparing Data",
    "text": "Assignment: Exploring and Preparing Data\nEstimated time needed: 70 minutes\nIn this assignment, we will predict if the Falcon 9 first stage will land successfully. SpaceX advertises Falcon 9 rocket launches on its website with a cost of 62 million dollars; other providers cost upward of 165 million dollars each, much of the savings is due to the fact that SpaceX can reuse the first stage.\nIn this lab, you will perform Exploratory Data Analysis and Feature Engineering.\nFalcon 9 first stage will land successfully\n\nSeveral examples of an unsuccessful landing are shown here:\n\nMost unsuccessful landings are planned. Space X performs a controlled landing in the oceans."
  },
  {
    "objectID": "projects/jupyter-labs-eda-dataviz.html#objectives",
    "href": "projects/jupyter-labs-eda-dataviz.html#objectives",
    "title": "LVM",
    "section": "Objectives",
    "text": "Objectives\nPerform exploratory Data Analysis and Feature Engineering using Pandas and Matplotlib\n\nExploratory Data Analysis\nPreparing Data Feature Engineering\n\n\n\nImport Libraries and Define Auxiliary Functions\nWe will import the following libraries the lab\n\n# andas is a software library written for the Python programming language for data manipulation and analysis.\nimport pandas as pd\n#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays\nimport numpy as np\n# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.\nimport matplotlib.pyplot as plt\n#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics\nimport seaborn as sns"
  },
  {
    "objectID": "projects/jupyter-labs-eda-dataviz.html#exploratory-data-analysis",
    "href": "projects/jupyter-labs-eda-dataviz.html#exploratory-data-analysis",
    "title": "LVM",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nFirst, let’s read the SpaceX dataset into a Pandas dataframe and print its summary\n\ndf=pd.read_csv(\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv\")\n\n# If you were unable to complete the previous lab correctly you can uncomment and load this csv\n\n# df = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/dataset_part_2.csv')\n\ndf.head(5)\n\n\n\n\n\n  \n    \n      \n      FlightNumber\n      Date\n      BoosterVersion\n      PayloadMass\n      Orbit\n      LaunchSite\n      Outcome\n      Flights\n      GridFins\n      Reused\n      Legs\n      LandingPad\n      Block\n      ReusedCount\n      Serial\n      Longitude\n      Latitude\n      Class\n    \n  \n  \n    \n      0\n      1\n      2010-06-04\n      Falcon 9\n      6104.959412\n      LEO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0003\n      -80.577366\n      28.561857\n      0\n    \n    \n      1\n      2\n      2012-05-22\n      Falcon 9\n      525.000000\n      LEO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0005\n      -80.577366\n      28.561857\n      0\n    \n    \n      2\n      3\n      2013-03-01\n      Falcon 9\n      677.000000\n      ISS\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0007\n      -80.577366\n      28.561857\n      0\n    \n    \n      3\n      4\n      2013-09-29\n      Falcon 9\n      500.000000\n      PO\n      VAFB SLC 4E\n      False Ocean\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1003\n      -120.610829\n      34.632093\n      0\n    \n    \n      4\n      5\n      2013-12-03\n      Falcon 9\n      3170.000000\n      GTO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1004\n      -80.577366\n      28.561857\n      0\n    \n  \n\n\n\n\nFirst, let’s try to see how the FlightNumber (indicating the continuous launch attempts.) and Payload variables would affect the launch outcome.\nWe can plot out the FlightNumber vs. PayloadMassand overlay the outcome of the launch. We see that as the flight number increases, the first stage is more likely to land successfully. The payload mass is also important; it seems the more massive the payload, the less likely the first stage will return.\n\nsns.catplot(y=\"PayloadMass\", x=\"FlightNumber\", hue=\"Class\", data=df, aspect = 4)\nplt.xlabel(\"Flight Number\",fontsize=12)\nplt.ylabel(\"Pay load Mass (kg)\",fontsize=12)\nplt.show()\n\n\n\n\nWe see that different launch sites have different success rates. CCAFS LC-40, has a success rate of 60 %, while KSC LC-39A and VAFB SLC 4E has a success rate of 77%.\nNext, let’s drill down to each site visualize its detailed launch records.\n\nTASK 1: Visualize the relationship between Flight Number and Launch Site\nUse the function catplot to plot FlightNumber vs LaunchSite, set the parameter x parameter to FlightNumber,set the y to Launch Site and set the parameter hue to ‘class’\n\n# Plot a scatter point chart with x axis to be Flight Number and y axis to be the launch site, and hue to be the class value\nsns.catplot(x=\"FlightNumber\", y=\"LaunchSite\", hue=\"Class\", data=df, aspect = 3)\nplt.xlabel(\"Flight Number\",fontsize=12)\nplt.ylabel(\"Launch Site\",fontsize=12)\nplt.show()\n\n\n\n\nNow try to explain the patterns you found in the Flight Number vs. Launch Site scatter point plots.\n\n\nTASK 2: Visualize the relationship between Payload and Launch Site\nWe also want to observe if there is any relationship between launch sites and their payload mass.\n\n# Plot a scatter point chart with x axis to be Pay Load Mass (kg) and y axis to be the launch site, and hue to be the class value\nsns.catplot(x=\"PayloadMass\", y=\"LaunchSite\", hue=\"Class\", data=df, aspect = 3)\nplt.xlabel(\"PayloadMass\",fontsize=12)\nplt.ylabel(\"Launch Site\",fontsize=12)\nplt.show()\n\n\n\n\nNow if you observe Payload Vs. Launch Site scatter point chart you will find for the VAFB-SLC launchsite there are no rockets launched for heavypayload mass(greater than 10000).\n\n\nTASK 3: Visualize the relationship between success rate of each orbit type\nNext, we want to visually check if there are any relationship between success rate and orbit type.\nLet’s create a bar chart for the sucess rate of each orbit\n\n# HINT use groupby method on Orbit column and get the mean of Class column\n\nsuccess_rate = df[['Orbit','Class']].groupby('Orbit').mean().sort_values('Class')\nprint(success_rate, '\\n')\n\nsuccess_rate.plot(kind='barh', figsize=(15, 10))\n\nplt.title('Relationship between success rate of each orbit type', fontsize=15)\nplt.xlabel('Success rate', fontsize=12)\nplt.ylabel('Orbit', fontsize=12)\n\nplt.show()\n\n          Class\nOrbit          \nSO     0.000000\nGTO    0.518519\nISS    0.619048\nMEO    0.666667\nPO     0.666667\nLEO    0.714286\nVLEO   0.857143\nES-L1  1.000000\nGEO    1.000000\nHEO    1.000000\nSSO    1.000000 \n\n\n\n\n\n\nAnalyze the ploted bar chart try to find which orbits have high sucess rate.\n\n\nTASK 4: Visualize the relationship between FlightNumber and Orbit type\nFor each orbit, we want to see if there is any relationship between FlightNumber and Orbit type.\n\n# Plot a scatter point chart with x axis to be FlightNumber and y axis to be the Orbit, and hue to be the class value\nsns.catplot(x=\"FlightNumber\", y=\"Orbit\", hue=\"Class\", data=df, aspect = 3)\nplt.xlabel(\"FlightNumber\",fontsize=12)\nplt.ylabel(\"Orbit\",fontsize=12)\nplt.show()\n\n\n\n\nYou should see that in the LEO orbit the Success appears related to the number of flights; on the other hand, there seems to be no relationship between flight number when in GTO orbit.\n\n\nTASK 5: Visualize the relationship between Payload and Orbit type\nSimilarly, we can plot the Payload vs. Orbit scatter point charts to reveal the relationship between Payload and Orbit type\n\n# Plot a scatter point chart with x axis to be Payload and y axis to be the Orbit, and hue to be the class value\nsns.catplot(x=\"PayloadMass\", y=\"Orbit\", hue=\"Class\", data=df, aspect = 3)\nplt.xlabel(\"PayloadMass\",fontsize=12)\nplt.ylabel(\"Orbit\",fontsize=12)\nplt.show()\n\n\n\n\nWith heavy payloads the successful landing or positive landing rate are more for Polar,LEO and ISS.\nHowever for GTO we cannot distinguish this well as both positive landing rate and negative landing(unsuccessful mission) are both there here.\n\n\nTASK 6: Visualize the launch success yearly trend\nYou can plot a line chart with x axis to be Year and y axis to be average success rate, to get the average launch success trend.\nThe function will help you get the year from the date:\n\n# A function to Extract years from the date \nyear=[]\ndef Extract_year(date):\n    for i in df[\"Date\"]:\n        year.append(i.split(\"-\")[0])\n    return year\n\nExtract_year(df.Date)\ndf['Year'] = year\ndf.head()\n\n\n\n\n\n  \n    \n      \n      FlightNumber\n      Date\n      BoosterVersion\n      PayloadMass\n      Orbit\n      LaunchSite\n      Outcome\n      Flights\n      GridFins\n      Reused\n      Legs\n      LandingPad\n      Block\n      ReusedCount\n      Serial\n      Longitude\n      Latitude\n      Class\n      Year\n    \n  \n  \n    \n      0\n      1\n      2010-06-04\n      Falcon 9\n      6104.959412\n      LEO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0003\n      -80.577366\n      28.561857\n      0\n      2010\n    \n    \n      1\n      2\n      2012-05-22\n      Falcon 9\n      525.000000\n      LEO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0005\n      -80.577366\n      28.561857\n      0\n      2012\n    \n    \n      2\n      3\n      2013-03-01\n      Falcon 9\n      677.000000\n      ISS\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0007\n      -80.577366\n      28.561857\n      0\n      2013\n    \n    \n      3\n      4\n      2013-09-29\n      Falcon 9\n      500.000000\n      PO\n      VAFB SLC 4E\n      False Ocean\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1003\n      -120.610829\n      34.632093\n      0\n      2013\n    \n    \n      4\n      5\n      2013-12-03\n      Falcon 9\n      3170.000000\n      GTO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1004\n      -80.577366\n      28.561857\n      0\n      2013\n    \n  \n\n\n\n\n\n# Plot a line chart with x axis to be the extracted year and y axis to be the success rate\nplt.figure(figsize=(15,10))\nsns.lineplot(x='Year', y='Class', data=df)\n\nplt.xlabel('Year', fontsize=12)\nplt.ylabel('Success rate', fontsize=12)\n\nplt.show()\n\n\n\n\nyou can observe that the sucess rate since 2013 kept increasing till 2020"
  },
  {
    "objectID": "projects/jupyter-labs-eda-dataviz.html#features-engineering",
    "href": "projects/jupyter-labs-eda-dataviz.html#features-engineering",
    "title": "LVM",
    "section": "Features Engineering",
    "text": "Features Engineering\nBy now, you should obtain some preliminary insights about how each important variable would affect the success rate, we will select the features that will be used in success prediction in the future module.\n\nfeatures = df[['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad', 'Block', 'ReusedCount', 'Serial']]\nfeatures.head()\n\n\n\n\n\n  \n    \n      \n      FlightNumber\n      PayloadMass\n      Orbit\n      LaunchSite\n      Flights\n      GridFins\n      Reused\n      Legs\n      LandingPad\n      Block\n      ReusedCount\n      Serial\n    \n  \n  \n    \n      0\n      1\n      6104.959412\n      LEO\n      CCAFS SLC 40\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0003\n    \n    \n      1\n      2\n      525.000000\n      LEO\n      CCAFS SLC 40\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0005\n    \n    \n      2\n      3\n      677.000000\n      ISS\n      CCAFS SLC 40\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0007\n    \n    \n      3\n      4\n      500.000000\n      PO\n      VAFB SLC 4E\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1003\n    \n    \n      4\n      5\n      3170.000000\n      GTO\n      CCAFS SLC 40\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1004\n    \n  \n\n\n\n\n\nTASK 7: Create dummy variables to categorical columns\nUse the function get_dummies and features dataframe to apply OneHotEncoder to the column Orbits, LaunchSite, LandingPad, and Serial. Assign the value to the variable features_one_hot, display the results using the method head. Your result dataframe must include all features including the encoded ones.\n\n# HINT: Use get_dummies() function on the categorical columns\nfeatures_one_hot = pd.get_dummies(features, columns=['Orbit', 'LaunchSite', 'LandingPad', 'Serial'])\n\nfeatures_one_hot.head()\n\n\n\n\n\n  \n    \n      \n      FlightNumber\n      PayloadMass\n      Flights\n      GridFins\n      Reused\n      Legs\n      Block\n      ReusedCount\n      Orbit_ES-L1\n      Orbit_GEO\n      ...\n      Serial_B1048\n      Serial_B1049\n      Serial_B1050\n      Serial_B1051\n      Serial_B1054\n      Serial_B1056\n      Serial_B1058\n      Serial_B1059\n      Serial_B1060\n      Serial_B1062\n    \n  \n  \n    \n      0\n      1\n      6104.959412\n      1\n      False\n      False\n      False\n      1.0\n      0\n      0\n      0\n      ...\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      1\n      2\n      525.000000\n      1\n      False\n      False\n      False\n      1.0\n      0\n      0\n      0\n      ...\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      2\n      3\n      677.000000\n      1\n      False\n      False\n      False\n      1.0\n      0\n      0\n      0\n      ...\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      3\n      4\n      500.000000\n      1\n      False\n      False\n      False\n      1.0\n      0\n      0\n      0\n      ...\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      4\n      5\n      3170.000000\n      1\n      False\n      False\n      False\n      1.0\n      0\n      0\n      0\n      ...\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n5 rows × 80 columns\n\n\n\n\nfeatures_one_hot.columns\n\nIndex(['FlightNumber', 'PayloadMass', 'Flights', 'GridFins', 'Reused', 'Legs',\n       'Block', 'ReusedCount', 'Orbit_ES-L1', 'Orbit_GEO', 'Orbit_GTO',\n       'Orbit_HEO', 'Orbit_ISS', 'Orbit_LEO', 'Orbit_MEO', 'Orbit_PO',\n       'Orbit_SO', 'Orbit_SSO', 'Orbit_VLEO', 'LaunchSite_CCAFS SLC 40',\n       'LaunchSite_KSC LC 39A', 'LaunchSite_VAFB SLC 4E',\n       'LandingPad_5e9e3032383ecb267a34e7c7',\n       'LandingPad_5e9e3032383ecb554034e7c9',\n       'LandingPad_5e9e3032383ecb6bb234e7ca',\n       'LandingPad_5e9e3032383ecb761634e7cb',\n       'LandingPad_5e9e3033383ecbb9e534e7cc', 'Serial_B0003', 'Serial_B0005',\n       'Serial_B0007', 'Serial_B1003', 'Serial_B1004', 'Serial_B1005',\n       'Serial_B1006', 'Serial_B1007', 'Serial_B1008', 'Serial_B1010',\n       'Serial_B1011', 'Serial_B1012', 'Serial_B1013', 'Serial_B1015',\n       'Serial_B1016', 'Serial_B1017', 'Serial_B1018', 'Serial_B1019',\n       'Serial_B1020', 'Serial_B1021', 'Serial_B1022', 'Serial_B1023',\n       'Serial_B1025', 'Serial_B1026', 'Serial_B1028', 'Serial_B1029',\n       'Serial_B1030', 'Serial_B1031', 'Serial_B1032', 'Serial_B1034',\n       'Serial_B1035', 'Serial_B1036', 'Serial_B1037', 'Serial_B1038',\n       'Serial_B1039', 'Serial_B1040', 'Serial_B1041', 'Serial_B1042',\n       'Serial_B1043', 'Serial_B1044', 'Serial_B1045', 'Serial_B1046',\n       'Serial_B1047', 'Serial_B1048', 'Serial_B1049', 'Serial_B1050',\n       'Serial_B1051', 'Serial_B1054', 'Serial_B1056', 'Serial_B1058',\n       'Serial_B1059', 'Serial_B1060', 'Serial_B1062'],\n      dtype='object')\n\n\n\n\nTASK 8: Cast all numeric columns to float64\nNow that our features_one_hot dataframe only contains numbers cast the entire dataframe to variable type float64\n\nfeatures_one_hot.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 90 entries, 0 to 89\nData columns (total 80 columns):\n #   Column                               Non-Null Count  Dtype  \n---  ------                               --------------  -----  \n 0   FlightNumber                         90 non-null     int64  \n 1   PayloadMass                          90 non-null     float64\n 2   Flights                              90 non-null     int64  \n 3   GridFins                             90 non-null     bool   \n 4   Reused                               90 non-null     bool   \n 5   Legs                                 90 non-null     bool   \n 6   Block                                90 non-null     float64\n 7   ReusedCount                          90 non-null     int64  \n 8   Orbit_ES-L1                          90 non-null     uint8  \n 9   Orbit_GEO                            90 non-null     uint8  \n 10  Orbit_GTO                            90 non-null     uint8  \n 11  Orbit_HEO                            90 non-null     uint8  \n 12  Orbit_ISS                            90 non-null     uint8  \n 13  Orbit_LEO                            90 non-null     uint8  \n 14  Orbit_MEO                            90 non-null     uint8  \n 15  Orbit_PO                             90 non-null     uint8  \n 16  Orbit_SO                             90 non-null     uint8  \n 17  Orbit_SSO                            90 non-null     uint8  \n 18  Orbit_VLEO                           90 non-null     uint8  \n 19  LaunchSite_CCAFS SLC 40              90 non-null     uint8  \n 20  LaunchSite_KSC LC 39A                90 non-null     uint8  \n 21  LaunchSite_VAFB SLC 4E               90 non-null     uint8  \n 22  LandingPad_5e9e3032383ecb267a34e7c7  90 non-null     uint8  \n 23  LandingPad_5e9e3032383ecb554034e7c9  90 non-null     uint8  \n 24  LandingPad_5e9e3032383ecb6bb234e7ca  90 non-null     uint8  \n 25  LandingPad_5e9e3032383ecb761634e7cb  90 non-null     uint8  \n 26  LandingPad_5e9e3033383ecbb9e534e7cc  90 non-null     uint8  \n 27  Serial_B0003                         90 non-null     uint8  \n 28  Serial_B0005                         90 non-null     uint8  \n 29  Serial_B0007                         90 non-null     uint8  \n 30  Serial_B1003                         90 non-null     uint8  \n 31  Serial_B1004                         90 non-null     uint8  \n 32  Serial_B1005                         90 non-null     uint8  \n 33  Serial_B1006                         90 non-null     uint8  \n 34  Serial_B1007                         90 non-null     uint8  \n 35  Serial_B1008                         90 non-null     uint8  \n 36  Serial_B1010                         90 non-null     uint8  \n 37  Serial_B1011                         90 non-null     uint8  \n 38  Serial_B1012                         90 non-null     uint8  \n 39  Serial_B1013                         90 non-null     uint8  \n 40  Serial_B1015                         90 non-null     uint8  \n 41  Serial_B1016                         90 non-null     uint8  \n 42  Serial_B1017                         90 non-null     uint8  \n 43  Serial_B1018                         90 non-null     uint8  \n 44  Serial_B1019                         90 non-null     uint8  \n 45  Serial_B1020                         90 non-null     uint8  \n 46  Serial_B1021                         90 non-null     uint8  \n 47  Serial_B1022                         90 non-null     uint8  \n 48  Serial_B1023                         90 non-null     uint8  \n 49  Serial_B1025                         90 non-null     uint8  \n 50  Serial_B1026                         90 non-null     uint8  \n 51  Serial_B1028                         90 non-null     uint8  \n 52  Serial_B1029                         90 non-null     uint8  \n 53  Serial_B1030                         90 non-null     uint8  \n 54  Serial_B1031                         90 non-null     uint8  \n 55  Serial_B1032                         90 non-null     uint8  \n 56  Serial_B1034                         90 non-null     uint8  \n 57  Serial_B1035                         90 non-null     uint8  \n 58  Serial_B1036                         90 non-null     uint8  \n 59  Serial_B1037                         90 non-null     uint8  \n 60  Serial_B1038                         90 non-null     uint8  \n 61  Serial_B1039                         90 non-null     uint8  \n 62  Serial_B1040                         90 non-null     uint8  \n 63  Serial_B1041                         90 non-null     uint8  \n 64  Serial_B1042                         90 non-null     uint8  \n 65  Serial_B1043                         90 non-null     uint8  \n 66  Serial_B1044                         90 non-null     uint8  \n 67  Serial_B1045                         90 non-null     uint8  \n 68  Serial_B1046                         90 non-null     uint8  \n 69  Serial_B1047                         90 non-null     uint8  \n 70  Serial_B1048                         90 non-null     uint8  \n 71  Serial_B1049                         90 non-null     uint8  \n 72  Serial_B1050                         90 non-null     uint8  \n 73  Serial_B1051                         90 non-null     uint8  \n 74  Serial_B1054                         90 non-null     uint8  \n 75  Serial_B1056                         90 non-null     uint8  \n 76  Serial_B1058                         90 non-null     uint8  \n 77  Serial_B1059                         90 non-null     uint8  \n 78  Serial_B1060                         90 non-null     uint8  \n 79  Serial_B1062                         90 non-null     uint8  \ndtypes: bool(3), float64(2), int64(3), uint8(72)\nmemory usage: 10.2 KB\n\n\n\n# HINT: use astype function\nfeatures_one_hot = features_one_hot.astype('float64')\n\n\nfeatures_one_hot.dtypes\n\nFlightNumber    float64\nPayloadMass     float64\nFlights         float64\nGridFins        float64\nReused          float64\n                 ...   \nSerial_B1056    float64\nSerial_B1058    float64\nSerial_B1059    float64\nSerial_B1060    float64\nSerial_B1062    float64\nLength: 80, dtype: object\n\n\nWe can now export it to a CSV for the next section,but to make the answers consistent, in the next lab we will provide data in a pre-selected date range.\nfeatures_one_hot.to_csv(‘dataset_part_3.csv’, index=False)\n\nfeatures_one_hot.to_csv('dataset_part_3.csv', index=False)"
  },
  {
    "objectID": "projects/jupyter-labs-eda-dataviz.html#authors",
    "href": "projects/jupyter-labs-eda-dataviz.html#authors",
    "title": "LVM",
    "section": "Authors",
    "text": "Authors\nJoseph Santarcangelo has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\nNayef Abou Tayoun is a Data Scientist at IBM and pursuing a Master of Management in Artificial intelligence degree at Queen’s University."
  },
  {
    "objectID": "projects/jupyter-labs-eda-dataviz.html#change-log",
    "href": "projects/jupyter-labs-eda-dataviz.html#change-log",
    "title": "LVM",
    "section": "Change Log",
    "text": "Change Log\n\n\n\n\n\n\n\n\n\nDate (YYYY-MM-DD)\nVersion\nChanged By\nChange Description\n\n\n\n\n2021-10-12\n1.1\nLakshmi Holla\nModified markdown\n\n\n2020-09-20\n1.0\nJoseph\nModified Multiple Areas\n\n\n2020-11-10\n1.1\nNayef\nupdating the input data\n\n\n\nCopyright © 2020 IBM Corporation. All rights reserved."
  },
  {
    "objectID": "projects/lab_jupyter_launch_site_location.html#objectives",
    "href": "projects/lab_jupyter_launch_site_location.html#objectives",
    "title": "LVM",
    "section": "Objectives",
    "text": "Objectives\nThis lab contains the following tasks:\n\nTASK 1: Mark all launch sites on a map\nTASK 2: Mark the success/failed launches for each site on the map\nTASK 3: Calculate the distances between a launch site to its proximities\n\nAfter completed the above tasks, you should be able to find some geographical patterns about launch sites.\nLet’s first import required Python packages for this lab:\n\n!pip3 install folium==0.12.0\n!pip3 install wget\n\nRequirement already satisfied: folium==0.12.0 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (0.12.0)\nRequirement already satisfied: numpy in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from folium==0.12.0) (1.21.4)\nRequirement already satisfied: jinja2>=2.9 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from folium==0.12.0) (3.0.3)\nRequirement already satisfied: requests in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from folium==0.12.0) (2.26.0)\nRequirement already satisfied: branca>=0.3.0 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from folium==0.12.0) (0.4.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from jinja2>=2.9->folium==0.12.0) (2.0.1)\nRequirement already satisfied: certifi>=2017.4.17 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests->folium==0.12.0) (2021.10.8)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests->folium==0.12.0) (1.26.7)\nRequirement already satisfied: idna<4,>=2.5 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests->folium==0.12.0) (3.1)\nRequirement already satisfied: charset-normalizer~=2.0.0 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests->folium==0.12.0) (2.0.8)\nRequirement already satisfied: wget in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (3.2)\n\n\n\nimport folium\nimport wget\nimport pandas as pd\n\n\n# Import folium MarkerCluster plugin\nfrom folium.plugins import MarkerCluster\n# Import folium MousePosition plugin\nfrom folium.plugins import MousePosition\n# Import folium DivIcon plugin\nfrom folium.features import DivIcon\n\nIf you need to refresh your memory about folium, you may download and refer to this previous folium lab:\nGenerating Maps with Python"
  },
  {
    "objectID": "projects/lab_jupyter_launch_site_location.html#task-1-mark-all-launch-sites-on-a-map",
    "href": "projects/lab_jupyter_launch_site_location.html#task-1-mark-all-launch-sites-on-a-map",
    "title": "LVM",
    "section": "Task 1: Mark all launch sites on a map",
    "text": "Task 1: Mark all launch sites on a map\nFirst, let’s try to add each site’s location on a map using site’s latitude and longitude coordinates\nThe following dataset with the name spacex_launch_geo.csv is an augmented dataset with latitude and longitude added for each site.\n\n# Download and read the `spacex_launch_geo.csv`\nspacex_csv_file = wget.download('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv')\nspacex_df=pd.read_csv(spacex_csv_file)\n\nNow, you can take a look at what are the coordinates for each site.\n\n# Select relevant sub-columns: `Launch Site`, `Lat(Latitude)`, `Long(Longitude)`, `class`\nspacex_df = spacex_df[['Launch Site', 'Lat', 'Long', 'class']]\nlaunch_sites_df = spacex_df.groupby(['Launch Site'], as_index=False).first()\nlaunch_sites_df = launch_sites_df[['Launch Site', 'Lat', 'Long']]\nlaunch_sites_df\n\n\n\n\n\n  \n    \n      \n      Launch Site\n      Lat\n      Long\n    \n  \n  \n    \n      0\n      CCAFS LC-40\n      28.562302\n      -80.577356\n    \n    \n      1\n      CCAFS SLC-40\n      28.563197\n      -80.576820\n    \n    \n      2\n      KSC LC-39A\n      28.573255\n      -80.646895\n    \n    \n      3\n      VAFB SLC-4E\n      34.632834\n      -120.610746\n    \n  \n\n\n\n\nAbove coordinates are just plain numbers that can not give you any intuitive insights about where are those launch sites. If you are very good at geography, you can interpret those numbers directly in your mind. If not, that’s fine too. Let’s visualize those locations by pinning them on a map.\nWe first need to create a folium Map object, with an initial center location to be NASA Johnson Space Center at Houston, Texas.\n\n# Start location is NASA Johnson Space Center\nnasa_coordinate = [29.559684888503615, -95.0830971930759]\nsite_map = folium.Map(location=nasa_coordinate, zoom_start=10)\n\nWe could use folium.Circle to add a highlighted circle area with a text label on a specific coordinate. For example,\n\n# Create a blue circle at NASA Johnson Space Center's coordinate with a popup label showing its name\ncircle = folium.Circle(nasa_coordinate, radius=1000, color='#d35400', fill=True).add_child(folium.Popup('NASA Johnson Space Center'))\n# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name\nmarker = folium.map.Marker(\n    nasa_coordinate,\n    # Create an icon as a text label\n    icon=DivIcon(\n        icon_size=(20,20),\n        icon_anchor=(0,0),\n        html='<div style=\"font-size: 12; color:#d35400;\"><b>%s</b></div>' % 'NASA JSC',\n        )\n    )\nsite_map.add_child(circle)\nsite_map.add_child(marker)\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\nand you should find a small yellow circle near the city of Houston and you can zoom-in to see a larger circle.\nNow, let’s add a circle for each launch site in data frame launch_sites\nTODO: Create and add folium.Circle and folium.Marker for each launch site on the site map\nAn example of folium.Circle:\nfolium.Circle(coordinate, radius=1000, color='#000000', fill=True).add_child(folium.Popup(...))\nAn example of folium.Marker:\nfolium.map.Marker(coordinate, icon=DivIcon(icon_size=(20,20),icon_anchor=(0,0), html='<div style=\"font-size: 12; color:#d35400;\"><b>%s</b></div>' % 'label', ))\n\n# For each launch site, add a Circle object based on its coordinate (Lat, Long) values. In addition, add Launch site name as a popup label\nlaunch_site = launch_sites_df['Launch Site']\n\n# list of Lat, Long values\ncoord_list = list(zip(launch_sites_df.Lat, launch_sites_df.Long))\n\n# dictionary with Lat, Long values\ncoordinates = dict.fromkeys(launch_site)\ncoordinates['CCAFS LC-40'] = coord_list[0]\ncoordinates['CCAFS SLC-40'] = coord_list[1]\ncoordinates['KSC LC-39A'] = coord_list[2]\ncoordinates['VAFB SLC-4E'] = coord_list[3]\n\n# list of colors\ncolor_list = ['lightblue', 'lightgreen', 'black', 'orange']\n\n# list of labels\nlabels_list = ['CCAFS Launch Complex 40', 'CCAFS Space Launch Complex 40', 'KSC Launch Complex 39A', 'VAFB Space Launch Complex 4E']\n\nradius = 1500\n\n\ndef circle_func(coordinate, radius, color, label):\n    circle = folium.Circle(coordinate, radius, color=color, fill=True).add_child(folium.Popup(label))\n    return site_map.add_child(circle)\n\ndef marker_func(coordinate, label):\n    marker = folium.map.Marker(\n        coordinate,\n        icon = DivIcon(icon_size=(20,20),icon_anchor=(0,0),\n                       html='<div style=\"font-size: 12; color:#d35400;\"><b>%s</b></div>' % label,\n                      )\n    )\n    return site_map.add_child(marker)\n\n\n# Initial the map\nsite_map = folium.Map(location=nasa_coordinate, zoom_start=4)\n\ncircle_func(coord_list[0], radius, color_list[0], labels_list[0])\ncircle_func(coord_list[1], radius, color_list[1], labels_list[1])\ncircle_func(coord_list[2], radius, color_list[2], labels_list[2])\ncircle_func(coord_list[3], radius, color_list[3], labels_list[3])\n\nmarker_func(coord_list[0], labels_list[0])\nmarker_func(coord_list[1], labels_list[1])\nmarker_func(coord_list[2], labels_list[2])\nmarker_func(coord_list[3], labels_list[3])\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\nThe generated map with marked launch sites should look similar to the following:\n\n\n\nNow, you can explore the map by zoom-in/out the marked areas , and try to answer the following questions:\n\nAre all launch sites in proximity to the Equator line?\nAre all launch sites in very close proximity to the coast?\n\nAlso please try to explain your findings."
  },
  {
    "objectID": "projects/lab_jupyter_launch_site_location.html#authors",
    "href": "projects/lab_jupyter_launch_site_location.html#authors",
    "title": "LVM",
    "section": "Authors",
    "text": "Authors\nYan Luo\n\nOther Contributors\nJoseph Santarcangelo"
  },
  {
    "objectID": "projects/lab_jupyter_launch_site_location.html#change-log",
    "href": "projects/lab_jupyter_launch_site_location.html#change-log",
    "title": "LVM",
    "section": "Change Log",
    "text": "Change Log\n\n\n\n\n\n\n\n\n\nDate (YYYY-MM-DD)\nVersion\nChanged By\nChange Description\n\n\n\n\n2021-05-26\n1.0\nYan\nCreated the initial version\n\n\n\nCopyright © 2021 IBM Corporation. All rights reserved."
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#assignment-machine-learning-prediction",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#assignment-machine-learning-prediction",
    "title": "LVM",
    "section": "Assignment: Machine Learning Prediction",
    "text": "Assignment: Machine Learning Prediction\nEstimated time needed: 60 minutes\nSpace X advertises Falcon 9 rocket launches on its website with a cost of 62 million dollars; other providers cost upward of 165 million dollars each, much of the savings is because Space X can reuse the first stage. Therefore if we can determine if the first stage will land, we can determine the cost of a launch. This information can be used if an alternate company wants to bid against space X for a rocket launch. In this lab, you will create a machine learning pipeline to predict if the first stage will land given the data from the preceding labs.\n\nSeveral examples of an unsuccessful landing are shown here:\n\nMost unsuccessful landings are planed. Space X; performs a controlled landing in the oceans."
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#objectives",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#objectives",
    "title": "LVM",
    "section": "Objectives",
    "text": "Objectives\nPerform exploratory Data Analysis and determine Training Labels\n\ncreate a column for the class\nStandardize the data\nSplit into training data and test data\nFind best Hyperparameter for SVM, Classification Trees and Logistic Regression\nFind the method performs best using test data"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#import-libraries-and-define-auxiliary-functions",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#import-libraries-and-define-auxiliary-functions",
    "title": "LVM",
    "section": "Import Libraries and Define Auxiliary Functions",
    "text": "Import Libraries and Define Auxiliary Functions\nWe will import the following libraries for the lab\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter('ignore')\n\n\n# Pandas is a software library written for the Python programming language for data manipulation and analysis.\nimport pandas as pd\n# NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays\nimport numpy as np\n# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.\nimport matplotlib.pyplot as plt\n#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics\nimport seaborn as sns\n# Preprocessing allows us to standarsize our data\nfrom sklearn import preprocessing\n# Allows us to split our data into training and testing data\nfrom sklearn.model_selection import train_test_split\n# Allows us to test parameters of classification algorithms and find the best one\nfrom sklearn.model_selection import GridSearchCV\n# Logistic Regression classification algorithm\nfrom sklearn.linear_model import LogisticRegression\n# Support Vector Machine classification algorithm\nfrom sklearn.svm import SVC\n# Decision Tree classification algorithm\nfrom sklearn.tree import DecisionTreeClassifier\n# K Nearest Neighbors classification algorithm\nfrom sklearn.neighbors import KNeighborsClassifier\n\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/utils/validation.py:37: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n  LARGE_SPARSE_SUPPORTED = LooseVersion(scipy_version) >= '0.14.0'\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:35: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  eps=np.finfo(np.float).eps,\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:597: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:836: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:862: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  eps=np.finfo(np.float).eps, positive=False):\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1097: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1344: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1480: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  eps=np.finfo(np.float).eps, copy_X=True, positive=False):\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:152: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  precompute=False, eps=np.finfo(np.float).eps,\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:320: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  eps=np.finfo(np.float).eps, random_state=None,\n/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:580: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  eps=4 * np.finfo(np.float).eps, n_jobs=None,\n\n\nThis function is to plot the confusion matrix.\n\ndef plot_confusion_matrix(y,y_predict):\n    \"this function plots the confusion matrix\"\n    from sklearn.metrics import confusion_matrix\n\n    cm = confusion_matrix(y, y_predict)\n    ax= plt.subplot()\n    sns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells\n    ax.set_xlabel('Predicted labels')\n    ax.set_ylabel('True labels')\n    ax.set_title('Confusion Matrix'); \n    ax.xaxis.set_ticklabels(['did not land', 'land']); ax.yaxis.set_ticklabels(['did not land', 'landed'])"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#load-the-dataframe",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#load-the-dataframe",
    "title": "LVM",
    "section": "Load the dataframe",
    "text": "Load the dataframe\nLoad the data\n\ndata = pd.read_csv(\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv\")\n\n# If you were unable to complete the previous lab correctly you can uncomment and load this csv\n\n# data = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/dataset_part_2.csv')\n\ndata.head()\n\n\n\n\n\n  \n    \n      \n      FlightNumber\n      Date\n      BoosterVersion\n      PayloadMass\n      Orbit\n      LaunchSite\n      Outcome\n      Flights\n      GridFins\n      Reused\n      Legs\n      LandingPad\n      Block\n      ReusedCount\n      Serial\n      Longitude\n      Latitude\n      Class\n    \n  \n  \n    \n      0\n      1\n      2010-06-04\n      Falcon 9\n      6104.959412\n      LEO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0003\n      -80.577366\n      28.561857\n      0\n    \n    \n      1\n      2\n      2012-05-22\n      Falcon 9\n      525.000000\n      LEO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0005\n      -80.577366\n      28.561857\n      0\n    \n    \n      2\n      3\n      2013-03-01\n      Falcon 9\n      677.000000\n      ISS\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B0007\n      -80.577366\n      28.561857\n      0\n    \n    \n      3\n      4\n      2013-09-29\n      Falcon 9\n      500.000000\n      PO\n      VAFB SLC 4E\n      False Ocean\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1003\n      -120.610829\n      34.632093\n      0\n    \n    \n      4\n      5\n      2013-12-03\n      Falcon 9\n      3170.000000\n      GTO\n      CCAFS SLC 40\n      None None\n      1\n      False\n      False\n      False\n      NaN\n      1.0\n      0\n      B1004\n      -80.577366\n      28.561857\n      0\n    \n  \n\n\n\n\n\nX = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_3.csv')\n\n# If you were unable to complete the previous lab correctly you can uncomment and load this csv\n\n# X = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/dataset_part_3.csv')\n\nX.head(100)\n\n\n\n\n\n  \n    \n      \n      FlightNumber\n      PayloadMass\n      Flights\n      Block\n      ReusedCount\n      Orbit_ES-L1\n      Orbit_GEO\n      Orbit_GTO\n      Orbit_HEO\n      Orbit_ISS\n      ...\n      Serial_B1058\n      Serial_B1059\n      Serial_B1060\n      Serial_B1062\n      GridFins_False\n      GridFins_True\n      Reused_False\n      Reused_True\n      Legs_False\n      Legs_True\n    \n  \n  \n    \n      0\n      1.0\n      6104.959412\n      1.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n    \n    \n      1\n      2.0\n      525.000000\n      1.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n    \n    \n      2\n      3.0\n      677.000000\n      1.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n    \n    \n      3\n      4.0\n      500.000000\n      1.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n    \n    \n      4\n      5.0\n      3170.000000\n      1.0\n      1.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      85\n      86.0\n      15400.000000\n      2.0\n      5.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      1.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n    \n    \n      86\n      87.0\n      15400.000000\n      3.0\n      5.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n    \n    \n      87\n      88.0\n      15400.000000\n      6.0\n      5.0\n      5.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n    \n    \n      88\n      89.0\n      15400.000000\n      3.0\n      5.0\n      2.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      1.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      0.0\n      1.0\n    \n    \n      89\n      90.0\n      3681.000000\n      1.0\n      5.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      1.0\n      1.0\n      0.0\n      0.0\n      1.0\n    \n  \n\n90 rows × 83 columns"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-1",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-1",
    "title": "LVM",
    "section": "TASK 1",
    "text": "TASK 1\nCreate a NumPy array from the column Class in data, by applying the method to_numpy() then assign it to the variable Y,make sure the output is a Pandas series (only one bracket df[‘name of column’]).\n\nY = data.Class.to_numpy()"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-2",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-2",
    "title": "LVM",
    "section": "TASK 2",
    "text": "TASK 2\nStandardize the data in X then reassign it to the variable X using the transform provided below.\n\n# students get this \ntransform = preprocessing.StandardScaler()\n\n\nX = transform.fit_transform(X)\n\n\nX\n\narray([[-1.71291154e+00, -1.94814463e-16, -6.53912840e-01, ...,\n        -8.35531692e-01,  1.93309133e+00, -1.93309133e+00],\n       [-1.67441914e+00, -1.19523159e+00, -6.53912840e-01, ...,\n        -8.35531692e-01,  1.93309133e+00, -1.93309133e+00],\n       [-1.63592675e+00, -1.16267307e+00, -6.53912840e-01, ...,\n        -8.35531692e-01,  1.93309133e+00, -1.93309133e+00],\n       ...,\n       [ 1.63592675e+00,  1.99100483e+00,  3.49060516e+00, ...,\n         1.19684269e+00, -5.17306132e-01,  5.17306132e-01],\n       [ 1.67441914e+00,  1.99100483e+00,  1.00389436e+00, ...,\n         1.19684269e+00, -5.17306132e-01,  5.17306132e-01],\n       [ 1.71291154e+00, -5.19213966e-01, -6.53912840e-01, ...,\n        -8.35531692e-01, -5.17306132e-01,  5.17306132e-01]])\n\n\nWe split the data into training and testing data using the function train_test_split. The training data is divided into validation data, a second set used for training data; then the models are trained and hyperparameters are selected using the function GridSearchCV."
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-3",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-3",
    "title": "LVM",
    "section": "TASK 3",
    "text": "TASK 3\nUse the function train_test_split to split the data X and Y into training and test data. Set the parameter test_size to 0.2 and random_state to 2. The training data and test data should be assigned to the following labels.\nX_train, X_test, Y_train, Y_test\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)\n\nwe can see we only have 18 test samples.\n\nY_test.shape\n\n(18,)"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-4",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-4",
    "title": "LVM",
    "section": "TASK 4",
    "text": "TASK 4\nCreate a logistic regression object then create a GridSearchCV object logreg_cv with cv = 10. Fit the object to find the best parameters from the dictionary parameters.\n\nparameters ={'C':[0.01,0.1,1],\n             'penalty':['l2'],\n             'solver':['lbfgs']}\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter('ignore')\n\n\nparameters ={\"C\":[0.01,0.1,1],'penalty':['l2'], 'solver':['lbfgs']}# l1 lasso l2 ridge\nlr=LogisticRegression()\n\nlogreg_cv = GridSearchCV(estimator=lr, param_grid=parameters, cv=10)\nlogreg_model_result = logreg_cv.fit(X_train, Y_train)\n\nWe output the GridSearchCV object for logistic regression. We display the best parameters using the data attribute best_params_ and the accuracy on the validation data using the data attribute best_score_.\n\nprint(\"tuned hyperparameters :(best parameters) \",logreg_cv.best_params_)\nprint(\"accuracy :\",logreg_cv.best_score_)\n\ntuned hyperparameters :(best parameters)  {'C': 0.01, 'penalty': 'l2', 'solver': 'lbfgs'}\naccuracy : 0.8472222222222222"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-5",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-5",
    "title": "LVM",
    "section": "TASK 5",
    "text": "TASK 5\nCalculate the accuracy on the test data using the method score:\n\nprint(\"Accuracy of logistic regression classifier: \", logreg_cv.score(X_test, Y_test))\n\nAccuracy of logistic regression classifier:  0.8333333333333334\n\n\nLets look at the confusion matrix:\n\nyhat=logreg_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)\n\n\n\n\nExamining the confusion matrix, we see that logistic regression can distinguish between the different classes. We see that the major problem is false positives."
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-6",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-6",
    "title": "LVM",
    "section": "TASK 6",
    "text": "TASK 6\nCreate a support vector machine object then create a GridSearchCV object svm_cv with cv - 10. Fit the object to find the best parameters from the dictionary parameters.\n\nparameters = {'kernel':('linear', 'rbf','poly','rbf', 'sigmoid'),\n              'C': np.logspace(-3, 3, 5),\n              'gamma':np.logspace(-3, 3, 5)}\nsvm = SVC()\n\n\nsvm_cv = GridSearchCV(estimator=svm, param_grid=parameters, cv=10)\nsvm_model_result = svm_cv.fit(X_train, Y_train)\n\n\nprint(\"tuned hyperparameters :(best parameters) \",svm_cv.best_params_)\nprint(\"accuracy :\",svm_cv.best_score_)\n\ntuned hyperparameters :(best parameters)  {'C': 1.0, 'gamma': 0.03162277660168379, 'kernel': 'sigmoid'}\naccuracy : 0.8472222222222222"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-7",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-7",
    "title": "LVM",
    "section": "TASK 7",
    "text": "TASK 7\nCalculate the accuracy on the test data using the method score:\n\nprint(\"Accuracy of support vector machine: \", svm_cv.score(X_test, Y_test))\n\nAccuracy of support vector machine:  0.8333333333333334\n\n\nWe can plot the confusion matrix\n\nyhat=svm_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-8",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-8",
    "title": "LVM",
    "section": "TASK 8",
    "text": "TASK 8\nCreate a decision tree classifier object then create a GridSearchCV object tree_cv with cv = 10. Fit the object to find the best parameters from the dictionary parameters.\n\nparameters = {'criterion': ['gini', 'entropy'],\n     'splitter': ['best', 'random'],\n     'max_depth': [2*n for n in range(1,10)],\n     'max_features': ['auto', 'sqrt'],\n     'min_samples_leaf': [1, 2, 4],\n     'min_samples_split': [2, 5, 10]}\n\ntree = DecisionTreeClassifier()\n\n\ntree_cv = GridSearchCV(estimator=tree, param_grid=parameters, cv=10)\ntree_cv_model_result = tree_cv.fit(X_train, Y_train)\n\n\nprint(\"tuned hpyerparameters :(best parameters) \",tree_cv.best_params_)\nprint(\"accuracy :\",tree_cv.best_score_)\n\ntuned hpyerparameters :(best parameters)  {'criterion': 'gini', 'max_depth': 2, 'max_features': 'sqrt', 'min_samples_leaf': 4, 'min_samples_split': 10, 'splitter': 'random'}\naccuracy : 0.875"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-9",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-9",
    "title": "LVM",
    "section": "TASK 9",
    "text": "TASK 9\nCalculate the accuracy of tree_cv on the test data using the method score:\n\nprint(\"Accuracy of decision tree classifier: \", tree_cv.score(X_test, Y_test))\n\nAccuracy of decision tree classifier:  0.8333333333333334\n\n\nWe can plot the confusion matrix\n\nyhat = tree_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-10",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-10",
    "title": "LVM",
    "section": "TASK 10",
    "text": "TASK 10\nCreate a k nearest neighbors object then create a GridSearchCV object knn_cv with cv = 10. Fit the object to find the best parameters from the dictionary parameters.\n\nparameters = {'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n              'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],\n              'p': [1,2]}\n\nKNN = KNeighborsClassifier()\n\n\nknn_cv = GridSearchCV(estimator=KNN, param_grid=parameters, cv=10)\nknn_cv_model_result = knn_cv.fit(X_train, Y_train)\n\n\nprint(\"tuned hpyerparameters :(best parameters) \",knn_cv.best_params_)\nprint(\"accuracy :\",knn_cv.best_score_)\n\ntuned hpyerparameters :(best parameters)  {'algorithm': 'auto', 'n_neighbors': 9, 'p': 1}\naccuracy : 0.8472222222222222"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-11",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-11",
    "title": "LVM",
    "section": "TASK 11",
    "text": "TASK 11\nCalculate the accuracy of knn_cv on the test data using the method score:\n\nprint(\"Accuracy of k nearest neighbors: \", knn_cv.score(X_test, Y_test))\n\nAccuracy of k nearest neighbors:  0.8333333333333334\n\n\nWe can plot the confusion matrix\n\nyhat = knn_cv.predict(X_test)\nplot_confusion_matrix(Y_test,yhat)"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-12",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#task-12",
    "title": "LVM",
    "section": "TASK 12",
    "text": "TASK 12\nFind the method performs best:\nAs all the algorithms are giving the same accuracy, they all perform practically the same."
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#extra-task",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#extra-task",
    "title": "LVM",
    "section": "Extra Task:",
    "text": "Extra Task:\n\nBar Chart for all classification models\n\nscores = {'logreg_cv':logreg_cv.score(X_test, Y_test), 'svm_cv':svm_cv.score(X_test, Y_test),\n          'tree_cv':tree_cv.score(X_test, Y_test), 'knn_cv':knn_cv.score(X_test, Y_test)}\n\nlabels = list(scores.keys())\nvalues = list(scores.values())\n\nfig = plt.figure(figsize = (10, 5))\nplt.bar(labels, values)\nplt.xlabel(\"Model\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Classification Models\")\nplt.show()"
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#authors",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#authors",
    "title": "LVM",
    "section": "Authors",
    "text": "Authors\nJoseph Santarcangelo has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD."
  },
  {
    "objectID": "projects/SpaceX_Machine Learning Prediction_Part_5.html#change-log",
    "href": "projects/SpaceX_Machine Learning Prediction_Part_5.html#change-log",
    "title": "LVM",
    "section": "Change Log",
    "text": "Change Log\n\n\n\n\n\n\n\n\n\nDate (YYYY-MM-DD)\nVersion\nChanged By\nChange Description\n\n\n\n\n2021-08-31\n1.1\nLakshmi Holla\nModified markdown\n\n\n2020-09-20\n1.0\nJoseph\nModified Multiple Areas\n\n\n\nCopyright © 2020 IBM Corporation. All rights reserved."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "CV/Resume",
    "section": "",
    "text": "I have a CV!"
  }
]